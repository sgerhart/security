import os
import subprocess
import pefile
import hashlib
import pydump
import pywintrace
import pyreg
import pcapy
import openai

# OpenAI API key (if YARA rule generation is enabled)
openai.api_key = "your_api_key_here"

# Path to the malware sample
malware_file = "/path/to/malware_sample.exe"

# Ensure the malware file exists
if not os.path.exists(malware_file):
    print("Malware file not found.")
    exit(1)

# Calculate MD5 hash
def calculate_md5(file_path):
    try:
        md5_hash = hashlib.md5()
        with open(file_path, "rb") as f:
            while True:
                data = f.read(8192)
                if not data:
                    break
                md5_hash.update(data)
        return md5_hash.hexdigest()
    except Exception as e:
        print(f"MD5 calculation error: {str(e)}")
        return None

# Static Analysis
def static_analysis(file_path):
    try:
        # Calculate MD5 hash
        md5 = calculate_md5(file_path)

        # Use the 'file' command to identify the file type
        file_info = subprocess.check_output(["file", file_path], universal_newlines=True)
        static_info = {
            "File Information": file_info.strip(),
            "MD5 Hash": md5,
        }

        # Extract static strings from the binary
        strings_output = subprocess.check_output(["strings", file_path], universal_newlines=True)
        static_info["Static Strings"] = strings_output.strip().split('\n')

        # Analyze Windows PE file format
        pe = pefile.PE(file_path)
        static_info["PE Analysis"] = {
            "ImageBase": hex(pe.OPTIONAL_HEADER.ImageBase),
            "EntryPoint": hex(pe.OPTIONAL_HEADER.AddressOfEntryPoint),
            "NumberOfSections": pe.FILE_HEADER.NumberOfSections,
        }
        # Add more PE analysis as needed

        return static_info

    except Exception as e:
        print(f"Static analysis error: {str(e)}")
        return None

# Dynamic Analysis
def dynamic_analysis(file_path):
    try:
        # Execute the malware in a simulated environment (cmd.exe)
        cmd_command = f"cmd.exe /c {file_path}"
        dynamic_output = subprocess.check_output(cmd_command, shell=True, universal_newlines=True)

        # Capture memory dump (optional)
        memory_dump_path = "memory_dump.bin"
        pydump.dump_process(cmd_command, memory_dump_path)  # Use pydump for memory analysis

        # Monitor registry changes (optional)
        registry_changes = []
        registry_monitor = pyreg.RegistryMonitor()
        registry_monitor.set_callback(lambda e: registry_changes.append(e))
        registry_monitor.start()
        subprocess.call(cmd_command, shell=True)  # Execute the malware
        registry_monitor.stop()

        # Capture network packets (optional)
        packet_count = 0
        def packet_handler(header, data):
            nonlocal packet_count
            packet_count += 1
        capture = pcapy.open_live("eth0", 65536, True, 100)
        capture.loop(-1, packet_handler)

        dynamic_info = {
            "Dynamic Output": dynamic_output.strip(),
            "Memory Dump Path": memory_dump_path if os.path.exists(memory_dump_path) else None,
            "Registry Changes": registry_changes,
            "Packet Count": packet_count,
        }

        return dynamic_info

    except Exception as e:
        print(f"Dynamic analysis error: {str(e)}")
        return None

# Generate YARA rules using OpenAI (optional)
def generate_yara_rules(input_data):
    try:
        response = openai.Completion.create(
            engine="text-davinci-002",
            prompt=input_data,
            max_tokens=100,
            n=1
        )
        generated_rules = response.choices[0].text
        return generated_rules
    except Exception as e:
        print(f"OpenAI API error: {str(e)}")
        return None

# Perform Cuckoo analysis (optional)
def cuckoo_analysis(file_path):
    try:
        # Submit the malware sample to Cuckoo for analysis
        submit_command = f"cuckoo submit {file_path}"
        submission_result = subprocess.check_output(submit_command, shell=True, universal_newlines=True)

        # Extract the task ID from the submission result
        task_id = submission_result.strip().split(":")[-1].strip()

        # Check the analysis results
        status_command = f"cuckoo status {task_id}"
        analysis_status = subprocess.check_output(status_command, shell=True, universal_newlines=True)

        cuckoo_info = {
            "Cuckoo Submission Result": submission_result.strip(),
            "Cuckoo Analysis Status": analysis_status.strip(),
            "Cuckoo Task ID": task_id,
        }

        return cuckoo_info

    except Exception as e:
        print(f"Cuckoo analysis error: {str(e)}")
        return None

# Extract information from the malware sample
static_info = static_analysis(malware_file)
dynamic_info = dynamic_analysis(malware_file)

# Prepare input data for OpenAI (optional)
input_data = f"Static Analysis:\n{static_info}\nDynamic Analysis:\n{dynamic_info}\nGenerate YARA rules to detect this malware:"

# Generate YARA rules using OpenAI (optional)
generated_rules = generate_yara_rules(input_data) if "openai" in globals() else None

# Perform Cuckoo analysis (optional)
cuckoo_info = cuckoo_analysis(malware_file) if "cuckoo" in globals() else None

# Print and format the results
print("Static Analysis Results:")
for key, value in static_info.items():
    if isinstance(value, dict):
        print(f"{key}:")
        for subkey, subvalue in value.items():
            print(f" 
